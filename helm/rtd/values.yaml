microservice-chart:
  namespace: "rtd"
  nameOverride: ""
  fullnameOverride: ""

  livenessProbe:
    handlerType: httpGet
    httpGet:
      path: /actuator/health/liveness
      port: 8080
    initialDelaySeconds: 60
    failureThreshold: 6
    periodSeconds: 10

  readinessProbe:
    handlerType: httpGet
    httpGet:
      path: /actuator/health/readiness
      port: 8080
    initialDelaySeconds: 60
    failureThreshold: 6
    periodSeconds: 10

  podAnnotations: { }

  deployment:
    create: true

  service:
    create: true
    type: ClusterIP
    ports:
      - 8080

  ingress:
    create: true
    path: /rtdmsfileregister/(.*)
    servicePort: 8080

  serviceAccount:
    create: false
    annotations: {}
    name: ""

  podSecurityContext:
    seccompProfile:
      type: RuntimeDefault

  securityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534

  envConfig:
    APPLICATIONINSIGHTS_PREVIEW_PROFILER_ENABLED: "false"

  envSecret:
    MONGODB_CONNECTION_URI: mongo-db-connection-uri
    APPLICATIONINSIGHTS_CONNECTION_STRING: appinsights-instrumentation-key
    KAFKA_SASL_JAAS_CONFIG_CONSUMER_BLOB_STORAGE_EVENTS: evh-rtd-platform-events-rtd-platform-events-sub-rtd
    KAFKA_RTD_PROJECTOR_SASL_JAAS_CONFIG: evh-rtd-file-register-projector-rtd-file-register-projector-producer-policy-rtd

  envConfigMapExternals:
    rtd-fileregister:
      OPENTELEMETRY_LOG_LEVEL: APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL

    rtd-file-register-projector-producer:
      KAFKA_RTD_PROJECTOR_TOPIC: KAFKA_RTD_PROJECTOR_TOPIC
      KAFKA_RTD_PROJECTOR_BROKER: KAFKA_RTD_PROJECTOR_BROKER

    rtd-blob-storage-events:
      KAFKA_TOPIC_BLOB_STORAGE_EVENTS: KAFKA_TOPIC_BLOB_STORAGE_EVENTS
      KAFKA_BROKER: KAFKA_BROKER_RTD
