spring.application.name: rtdfileregister
logging:
    level:
        root: INFO
        org.apache.kafka: INFO


# OpenTelemetry
applicationinsights.enabled: '@applicationinsights.enabled@'
otel.log.level: ${OPENTELEMETRY_LOG_LEVEL:INFO}
otel.instrumentation.logback-appender.enabled: true # enable logback instrumentation
otel.traces.sampler.probability: 1.0 # sample probability for tracing (spans)
otel.metric.export.interval: 60000 # sampling rate for metrics (millis)
otel.exporter.otlp.enabled: false # disable send to OTLP endpoint

# Enable only health probes
management:
    metrics:
        export.defaults.enabled: false
        enable:
            all: false
            process.cpu: true
            system.cpu: true
            jvm.memory: true
            application: true
    info.defaults.enabled: false
    endpoints:
        enabled-by-default: false
        web.exposure.include: health
    endpoint:
        health:
            enabled: true
            probes:
                enabled: true

---

spring:
    config:
        activate:
            on-profile: default
    data:
        mongodb:
            uri: ${MONGODB_CONNECTION_URI:mongodb://localhost:27017}
            database: ${MONGODB_NAME:rtd}
    cloud:
        function:
            definition: blobStorageConsumer;fileRegisterProjector
        stream:
            default-binder: blob-storage
            kafka:
                binder:
                    configuration:
                        security.protocol: SASL_SSL
                        sasl.mechanism: PLAIN
#                        Recommended Values for both consumer and producer for azure eventhub
                        metadata.max.age.ms: 180000
                        connections.max.idle.ms: 180000
#                        The service will close connections if requests larger than 1046528 bytes are sent
                        max.request.size: 1000000
            bindings:
                blobStorageConsumer-in-0: # name must match [handler name]-in-0
                    destination: rtd-platform-events
                    group: rtd-file-register-consumer-group
                    content-type: application/json
                    binder: blob-storage
                fileRegisterProjector-out-0:
                    destination: ${KAFKA_RTD_PROJECTOR_TOPIC:rtd-file-register-projector}
                    content-type: application/json
                    binder: eventhub-projector
            binders:
                eventhub-projector:
                    type: kafka
                    environment.spring.cloud.stream.kafka.binder:
                        auto-create-topics: false
                        brokers: ${KAFKA_RTD_PROJECTOR_BROKER:localhost:29095}
                        configuration.sasl.jaas.config: ${KAFKA_RTD_PROJECTOR_SASL_JAAS_CONFIG}
                blob-storage:
                    type: kafka
                    environment.spring.cloud.stream.kafka.binder:
                        auto-create-topics: false
                        brokers: ${KAFKA_BROKER:localhost:29095}
                        configuration:
                            sasl.jaas.config: ${KAFKA_SASL_JAAS_CONFIG_CONSUMER_BLOB_STORAGE_EVENTS}
                        consumerProperties:
                            key:
                                deserializer: org.apache.kafka.common.serialization.StringDeserializer
                            value:
                                deserializer: org.apache.kafka.common.serialization.StringDeserializer

---

spring:
    config:
        activate:
            on-profile: dev
    data:
        mongodb:
            uri: ${MONGODB_CONNECTION_URI:mongodb://localhost:27017}
            database: ${MONGODB_NAME:fileregister}
    cloud:
        stream:
            bindings:
                blobStorageConsumer-in-0: # name must match [handler name]-in-0
                    destination: rtd-platform-events
                    group: rtd-file-register-consumer-group
                    content-type: application/json
                    binder: blob-storage
                fileRegisterProjector-out-0:
                    destination: ${KAFKA_RTD_PROJECTOR_TOPIC:rtd-file-register-projector}
                    content-type: application/json
                    binder: eventhub-projector
            binders:
                eventhub-projector:
                    type: kafka
                    environment.spring.cloud.stream.kafka.binder:
                        auto-create-topics: false
                        brokers: ${KAFKA_RTD_PROJECTOR_BROKER:localhost:29095}
                        sync: false
                        requiredAcks: all
                        consumerProperties:
                            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
                            value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
                blob-storage:
                    type: kafka
                    environment:
                        spring:
                            cloud:
                                stream:
                                    kafka:
                                        binder:
                                            auto-create-topics: false
                                            brokers: ${KAFKA_BROKER:localhost:29095}
                                            consumerProperties:
                                                key:
                                                    deserializer: org.apache.kafka.common.serialization.StringDeserializer
                                                value:
                                                    deserializer: org.apache.kafka.common.serialization.StringDeserializer
